#include <iostream>
#include <string>
using namespace std;

struct Tovar {
    string name;
    int quantity;
    double price;
};

struct TovarNode {
    Tovar tovar;
    TovarNode* next;
};

struct TovarList {
    TovarNode* head;

    TovarList() : head(nullptr) {}

    void addFirst(Tovar tovar) {
        TovarNode* newNode = new TovarNode;
        newNode->tovar = tovar;
        newNode->next = head;
        head = newNode;
    }

    void addLast(Tovar tovar) {
        TovarNode* newNode = new TovarNode;
        newNode->tovar = tovar;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
            return;
        }

        TovarNode* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }

    void addAfter(Tovar tovar, string afterName) {
        TovarNode* newNode = new TovarNode;
        newNode->tovar = tovar;

        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        TovarNode* current = head;
        while (current != nullptr && current->tovar.name != afterName) {
            current = current->next;
        }

        if (current == nullptr) {
            cout << "Item not found" << endl;
            return;
        }

        newNode->next = current->next;
        current->next = newNode;
    }

    void addBefore(Tovar tovar, string beforeName) {
        TovarNode* newNode = new TovarNode;
        newNode->tovar = tovar;

        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        if (head->tovar.name == beforeName) {
            newNode->next = head;
            head = newNode;
            return;
        }

        TovarNode* current = head;
        while (current->next != nullptr && current->next->tovar.name != beforeName) {
            current = current->next;
 }

        if (current->next == nullptr) {
            cout << "Item not found" << endl;
            return;
        }

        newNode->next = current->next;
        current->next = newNode;
    }

    void deleteTovar(string name) {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        if (head->tovar.name == name) {
            TovarNode* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        TovarNode* current = head;
        while (current->next != nullptr && current->next->tovar.name != name) {
            current = current->next;
        }

        if (current->next == nullptr) {
            cout << "Item not found" << endl;
            return;
        }

        TovarNode* temp = current->next;
        current->next = current->next->next;
        delete temp;
    }

    void printList() {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        TovarNode* current = head;
        while (current != nullptr) {
            cout << "Name: " << current->tovar.name << ", Quantity: " << current->tovar.quantity << ", Price: " << current->tovar.price << endl;
            current = current->next;
        }
        cout << endl;
    }
};

int main() {
    TovarList tovarList;
    Tovar tovar;
    string command, afterName, beforeName;

    while (true) {
        cout << "Enter command (add_first, add_last, add_after, add_before, delete, print, exit): ";
        cin >> command;

        if (command == "add_first") {
            cout << "Enter name, quantity, and price: ";
            cin >> tovar.name >> tovar.quantity >> tovar.price;
            tovarList.addFirst(tovar);
        } else if (command == "add_last") {
            cout << "Enter name, quantity, and price: ";
            cin >> tovar.name >> tovar.quantity >> tovar.price;
            tovarList.addLast(tovar);
        } else if (command == "add_after") {
            cout << "Enter name, quantity, and price, and after which item: ";
            cin >> tovar.name >> tovar.quantity >> tovar.price >> afterName;
            tovarList.addAfter(tovar, afterName);
        } else if (command == "add_before") {
            cout << "Enter name, quantity, and price, and before which item: ";
            cin >> tovar.name >> tovar.quantity >> tovar.price >> beforeName;
            tovarList.addBefore(tovar, beforeName);
        } else if (command == "delete") {
            cout << "Enter name: ";
            cin >> tovar.name;
            tovarList.deleteTovar(tovar.name);
        } else if (command == "print") {
            tovarList.printList();
        } else if (command == "exit") {
            break;
        } else {
            cout << "Invalid command" << endl;
        }
    }

    return 0;
}