#include <iostream>
#include <string>
using namespace std;

struct TovarNode {
    string name;
    TovarNode* next;
};

TovarNode* head = nullptr;

void addFirst(string name) {
    TovarNode* newNode = new TovarNode;
    newNode->name = name;
    newNode->next = head;
    head = newNode;
}

void addLast(string name) {
    TovarNode* newNode = new TovarNode;
    newNode->name = name;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
        return;
    }

    TovarNode* current = head;
    while (current->next != nullptr) {
        current = current->next;
    }
    current->next = newNode;
}

void addAfter(string name, string afterName) {
    TovarNode* newNode = new TovarNode;
    newNode->name = name;

    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    TovarNode* current = head;
    while (current != nullptr && current->name != afterName) {
        current = current->next;
    }

    if (current == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    newNode->next = current->next;
    current->next = newNode;
}

void addBefore(string name, string beforeName) {
    TovarNode* newNode = new TovarNode;
    newNode->name = name;

    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    if (head->name == beforeName) {
        newNode->next = head;
        head = newNode;
        return;
    }

    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != beforeName) {
        current = current->next;
    }

    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    newNode->next = current->next;
    current->next = newNode;
}

void deleteTovar(string name) {
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    if (head->name == name) {
        TovarNode* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != name) {
        current = current->next;
    }

    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    TovarNode* temp = current->next;
    current->next = current->next->next;
    delete temp;
}

void printList() {
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    TovarNode* current = head;
    while (current != nullptr) {
        cout << current->name << " ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    string command, name, afterName, beforeName;

    while (true) {
        cout << "Enter command (add_first, add_last, add_after, add_before, delete, print, exit): ";
        cin >> command;

        if (command == "add_first") {
            cout << "Enter name: ";
            cin >> name;
            addFirst(name);
        } else if (command == "add_last") {
            cout << "Enter name: ";
            cin >> name;
            addLast(name);
        } else if (command == "add_after") {
            cout << "Enter name and after which item: ";
            cin >> name >> afterName;
            addAfter(name, afterName);
        } else if (command == "add_before") {
            cout << "Enter name and before which item: ";
            cin >> name >> beforeName;
            addBefore(name, beforeName);
        } else if (command == "delete") {
            cout << "Enter name: ";
            cin >> name;
            deleteTovar(name);
        } else if (command == "print") {
            printList();
        } else if (command == "exit") {
            break;
        } else {
            cout << "Invalid command" << endl;
        }
    }

    return 0;
} 
Обьясни каждую строчку кода