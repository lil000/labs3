```cpp
#include <iostream>
#include <string>
using namespace std;

// Структура для элемента списка товаров
struct TovarNode {
    string name;        // Наименование товара
    TovarNode* next;    // Указатель на следующий элемент
};

TovarNode* head = nullptr; // Указатель на начало списка

// Функция для добавления элемента в начало списка
void addFirst(string name) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя
    newNode->next = head;               // Устанавливаем указатель на следующий элемент
    head = newNode;                     // Обновляем указатель на начало списка
}

// Функция для добавления элемента в конец списка
void addLast(string name) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя
    newNode->next = nullptr;            // Устанавливаем указатель на NULL, так как он будет последним

    // Если список пуст, то новый элемент становится началом списка
    if (head == nullptr) {
        head = newNode;
        return;
    }

    // Иначе ищем последний элемент и добавляем новый элемент после него
    TovarNode* current = head;
    while (current->next != nullptr) {
        current = current->next;
    }
    current->next = newNode;
}

// Функция для добавления элемента после определенного элемента
void addAfter(string name, string afterName) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя

    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Ищем элемент, после которого нужно добавить новый элемент
    TovarNode* current = head;
    while (current != nullptr && current->name != afterName) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    // Добавляем новый элемент после найденного элемента
    newNode->next = current->next;
    current->next = newNode;
}

// Функция для добавления элемента перед определенным элементом
void addBefore(string name, string beforeName) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя

    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Если нужно добавить элемент перед первым элементом
    if (head->name == beforeName) {
        newNode->next = head;
        head = newNode;
        return;
    }

    // Ищем элемент, перед которым нужно добавить новый элемент
    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != beforeName) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    // Добавляем новый элемент перед найденным элементом
    newNode->next = current->next;
    current->next = newNode;
}

// Функция для удаления элемента по имени
void deleteTovar(string name) {
    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Если нужно удалить первый элемент
    if (head->name == name) {
        TovarNode* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    // Ищем элемент по имени и удаляем его
    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != name) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    TovarNode* temp = current->next;
    current->next = current->next->next;
    delete temp;
}

// Функция для печати
списка товаров
void printList() {
    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Печатаем все элементы списка
    TovarNode* current = head;
    while (current != nullptr) {
        cout << current->name << " ";
        current = current->next;
    }
    cout << endl;
}

// Основная функция
int main() {
    string command, name, afterName, beforeName;

    // Цикл для взаимодействия с пользователем
    while (true) {
        cout << "Enter command (add_first, add_last, add_after, add_before, delete, print, exit): ";
        cin >> command;

        // Обработка команд
        if (command == "add_first") {
            cout << "Enter name: ";
            cin >> name;
            addFirst(name);
        } else if (command == "add_last") {
            cout << "Enter name: ";
            cin >> name;
            addLast(name);
        } else if (command == "add_after") {
            cout << "Enter name and after which item: ";
            cin >> name >> afterName;
            addAfter(name, afterName);
        } else if (command == "add_before") {
            cout << "Enter name and before which item: ";
            cin >> name >> beforeName;
            addBefore(name, beforeName);
        } else if (command == "delete") {
            cout << "Enter name: ";
            cin >> name;
            deleteTovar(name);
        } else if (command == "print") {
            printList();
        } else if (command == "exit") {
            break;
        } else {
            cout << "Invalid command" << endl;
        }
    }

    return 0;
}
```

.