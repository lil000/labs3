```cpp
#include <iostream>
#include <string>
using namespace std;

// Структура для элемента списка товаров
struct TovarNode {
    string name;        // Наименование товара
    TovarNode* next;    // Указатель на следующий элемент
};

TovarNode* head = nullptr; // Указатель на начало списка

// Функция для добавления элемента в начало списка
void addFirst(string name) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя
    newNode->next = head;               // Устанавливаем указатель на следующий элемент
    head = newNode;                     // Обновляем указатель на начало списка
}

// Функция для добавления элемента в конец списка
void addLast(string name) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя
    newNode->next = nullptr;            // Устанавливаем указатель на NULL, так как он будет последним

    // Если список пуст, то новый элемент становится началом списка
    if (head == nullptr) {
        head = newNode;
        return;
    }

    // Иначе ищем последний элемент и добавляем новый элемент после него
    TovarNode* current = head;
    while (current->next != nullptr) {
        current = current->next;
    }
    current->next = newNode;
}

// Функция для добавления элемента после определенного элемента
void addAfter(string name, string afterName) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя

    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Ищем элемент, после которого нужно добавить новый элемент
    TovarNode* current = head;
    while (current != nullptr && current->name != afterName) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    // Добавляем новый элемент после найденного элемента
    newNode->next = current->next;
    current->next = newNode;
}

// Функция для добавления элемента перед определенным элементом
void addBefore(string name, string beforeName) {
    TovarNode* newNode = new TovarNode; // Создаем новый элемент
    newNode->name = name;               // Присваиваем ему имя

    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Если нужно добавить элемент перед первым элементом
    if (head->name == beforeName) {
        newNode->next = head;
        head = newNode;
        return;
    }

    // Ищем элемент, перед которым нужно добавить новый элемент
    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != beforeName) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    // Добавляем новый элемент перед найденным элементом
    newNode->next = current->next;
    current->next = newNode;
}

// Функция для удаления элемента по имени
void deleteTovar(string name) {
    // Если список пуст, выводим сообщение об этом
    if (head == nullptr) {
        cout << "List is empty" << endl;
        return;
    }

    // Если нужно удалить первый элемент
    if (head->name == name) {
        TovarNode* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    // Ищем элемент по имени и удаляем его
    TovarNode* current = head;
    while (current->next != nullptr && current->next->name != name) {
        current = current->next;
    }

    // Если элемент не найден, выводим сообщение об этом
    if (current->next == nullptr) {
        cout << "Item not found" << endl;
        return;
    }

    TovarNode* temp = current->next;
    current->next = current->next->next;
    delete temp;
}

// Функция для печати